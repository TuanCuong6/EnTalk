// backend/services/gemini.js
const axios = require("axios");

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_URL = `https://generativelanguage.googleapis.com/v1/models/gemini-2.5-pro:generateContent?key=${GEMINI_API_KEY}`;

const PROMPT_TEMPLATE = `
B·∫°n l√† chuy√™n gia ƒë√°nh gi√° ph√°t √¢m ti·∫øng Anh.

D∆∞·ªõi ƒë√¢y l√† ƒëo·∫°n ng∆∞·ªùi d√πng ƒë√£ ƒë·ªçc (chuy·ªÉn t·ª´ gi·ªçng n√≥i th√†nh vƒÉn b·∫£n):
"""{{transcript}}"""

{{#if originalText}}
ƒêo·∫°n n√†y c·∫ßn ƒë∆∞·ª£c so s√°nh v·ªõi n·ªôi dung chu·∫©n sau:
"""{{originalText}}"""
{{/if}}

H√£y ƒë√°nh gi√° ph·∫ßn ƒë·ªçc theo c√°c ti√™u ch√≠ sau (thang ƒëi·ªÉm 10):
- Ph√°t √¢m
- Tr·ªçng √¢m v√† ng·ªØ ƒëi·ªáu
- L∆∞u lo√°t
- T·ªëc ƒë·ªô
- T·ªïng th·ªÉ

Ch·ªâ tr·∫£ v·ªÅ JSON ƒë√∫ng ƒë·ªãnh d·∫°ng sau, kh√¥ng markdown, kh√¥ng gi·∫£i th√≠ch:

{
  "scores": {
    "pronunciation": 8.5,
    "intonation": 7.0,
    "fluency": 8.0,
    "speed": 7.5,
    "overall": 7.8
  },
  "comment": "B·∫°n ph√°t √¢m kh√° t·ªët nh∆∞ng c·∫ßn c·∫£i thi·ªán ng·ªØ ƒëi·ªáu v√† t·ªëc ƒë·ªô ·ªü ƒëo·∫°n cu·ªëi."
}
`;

function buildPrompt(transcript, originalText) {
  let prompt = PROMPT_TEMPLATE.replace("{{transcript}}", transcript);

  if (originalText) {
    prompt = prompt.replace("{{#if originalText}}", "");
    prompt = prompt.replace("{{originalText}}", originalText);
    prompt = prompt.replace("{{/if}}", "");
  } else {
    prompt = prompt.replace(/{{#if originalText}}[\s\S]*?{{\/if}}/, "");
  }

  return prompt;
}

async function scoreWithGemini(transcript, originalText = null) {
  const prompt = buildPrompt(transcript, originalText);

  try {
    const response = await axios.post(GEMINI_URL, {
      contents: [{ parts: [{ text: prompt }] }],
    });

    const text = response.data.candidates?.[0]?.content?.parts?.[0]?.text || "";
    console.log("üéØ Gemini response:", text);

    let cleaned = text;
    const match = text.match(/```json([\s\S]*?)```/);
    if (match) cleaned = match[1].trim();

    const parsed = JSON.parse(cleaned);
    return parsed;
  } catch (err) {
    console.error("‚ùå L·ªói g·ªçi Gemini:", err.response?.data || err.message);
    // throw new Error("Kh√¥ng th·ªÉ ch·∫•m ƒëi·ªÉm v·ªõi Gemini");
    if (err.response?.status === 429) {
      throw new Error("H·ªá th·ªëng ƒëang qu√° t·∫£i, vui l√≤ng th·ª≠ l·∫°i sau.");
    } else if (err.response?.status >= 500) {
      throw new Error("L·ªói t·ª´ ph√≠a Gemini, vui l√≤ng th·ª≠ l·∫°i sau.");
    } else {
      throw new Error("Kh√¥ng th·ªÉ ch·∫•m ƒëi·ªÉm v·ªõi Gemini l√∫c n√†y.");
    }
  }
}

module.exports = { scoreWithGemini };
