//backend/services/geminiSuggest.js
const axios = require("axios");

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_URL = `https://generativelanguage.googleapis.com/v1/models/gemini-2.5-pro:generateContent?key=${GEMINI_API_KEY}`;

const PROMPT_TEMPLATE = `
B·∫°n l√† chuy√™n gia hu·∫•n luy·ªán ph√°t √¢m ti·∫øng Anh.

T√¥i s·∫Ω cung c·∫•p cho b·∫°n l·ªãch s·ª≠ ƒë·ªçc g·∫ßn ƒë√¢y c·ªßa m·ªôt ng∆∞·ªùi h·ªçc, bao g·ªìm vƒÉn b·∫£n h·ªç ƒë√£ ƒë·ªçc (t·ª´ gi·ªçng n√≥i) v√† ƒëi·ªÉm t·ªïng th·ªÉ m√† h·ªá th·ªëng ƒë√°nh gi√°.

H√£y ph√¢n t√≠ch ƒëi·ªÉm m·∫°nh v√† ƒëi·ªÉm y·∫øu, sau ƒë√≥ ƒë·ªÅ xu·∫•t:
- M·ªôt k·ªπ nƒÉng c·∫ßn c·∫£i thi·ªán (ch·ªâ ch·ªçn 1 trong c√°c k·ªπ nƒÉng: ph√°t √¢m, ng·ªØ ƒëi·ªáu, l∆∞u lo√°t, t·ªëc ƒë·ªô)
- M·ªôt ch·ªß ƒë·ªÅ ti·∫øng Anh n√™n luy·ªán th√™m (v√≠ d·ª•: Du l·ªãch, Khoa h·ªçc, Tin t·ª©c, Th√°m hi·ªÉm‚Ä¶)
- M·ªôt ƒëo·∫°n vƒÉn m·∫´u ph√π h·ª£p ƒë·ªÉ luy·ªán th√™m (vi·∫øt b·∫±ng ti·∫øng Anh, ƒë·ªô d√†i kho·∫£ng 1-2 c√¢u)

Ch·ªâ tr·∫£ v·ªÅ k·∫øt qu·∫£ ƒë√∫ng ƒë·ªãnh d·∫°ng JSON, kh√¥ng markdown, kh√¥ng gi·∫£i th√≠ch:

{
  "focus": "ng·ªØ ƒëi·ªáu",
  "topic": "Khoa h·ªçc",
  "suggestion": "Climate change is one of the biggest challenges facing our planet today."
}

D∆∞·ªõi ƒë√¢y l√† l·ªãch s·ª≠ luy·ªán t·∫≠p (t·ªëi ƒëa 3 b·∫£n ghi g·∫ßn nh·∫•t):

{{transcriptWithScores}}
`;

function buildPrompt(records) {
  const transcriptWithScores = records
    .map((r, i) => {
      return `#${i + 1}\nTranscript: ${r.transcript}\nScore: ${
        r.score_overall
      }`;
    })
    .join("\n\n");

  return PROMPT_TEMPLATE.replace(
    "{{transcriptWithScores}}",
    transcriptWithScores
  );
}

async function generateSmartSuggestion(records) {
  const prompt = buildPrompt(records);

  try {
    const response = await axios.post(GEMINI_URL, {
      contents: [{ parts: [{ text: prompt }] }],
    });

    const text = response.data.candidates?.[0]?.content?.parts?.[0]?.text || "";
    console.log("üéØ Gemini Suggestion Response:", text);

    const cleaned = text.replace(/```json|```/g, "").trim();
    return JSON.parse(cleaned);
  } catch (err) {
    console.error(
      "‚ùå L·ªói g·ªçi Gemini Suggest:",
      err.response?.data || err.message
    );
    throw new Error("Kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω luy·ªán t·∫≠p v·ªõi Gemini");
  }
}

module.exports = { generateSmartSuggestion };
